// #Sireum

package bc.BuildingControl

import org.sireum._
import bc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

// containers for the pre and post state values of ports and state variables

@sig trait TempControl_i_tcp_tempControl_PreState_Container extends art.DataContent {
  def api_tempChanged: Option[art.Empty]
  def api_fanAck: Option[BuildingControl.FanAck.Type]
  def api_setPoint: Option[BuildingControl.SetPoint_i]
  def api_currentTemp: BuildingControl.Temperature_i
}

// container for incoming ports
@datatype class TempControl_i_tcp_tempControl_PreState_Container_P (
  val api_tempChanged: Option[art.Empty],
  val api_fanAck: Option[BuildingControl.FanAck.Type],
  val api_setPoint: Option[BuildingControl.SetPoint_i],
  val api_currentTemp: BuildingControl.Temperature_i) extends TempControl_i_tcp_tempControl_PreState_Container

// container for incoming ports and state variables
@datatype class TempControl_i_tcp_tempControl_PreState_Container_PS (
  val api_tempChanged: Option[art.Empty],
  val api_fanAck: Option[BuildingControl.FanAck.Type],
  val api_setPoint: Option[BuildingControl.SetPoint_i],
  val api_currentTemp: BuildingControl.Temperature_i) extends TempControl_i_tcp_tempControl_PreState_Container

@sig trait TempControl_i_tcp_tempControl_PostState_Container extends art.DataContent {
  def api_fanCmd: Option[BuildingControl.FanCmd.Type]
}

// container for outgoing ports
@datatype class TempControl_i_tcp_tempControl_PostState_Container_P (
  val api_fanCmd: Option[BuildingControl.FanCmd.Type]) extends TempControl_i_tcp_tempControl_PostState_Container

// container for outgoing ports and state variables
@datatype class TempControl_i_tcp_tempControl_PostState_Container_PS (
  val api_fanCmd: Option[BuildingControl.FanCmd.Type]) extends TempControl_i_tcp_tempControl_PostState_Container
