// #Sireum

package bc.BuildingControl

import org.sireum._
import art._
import bc.SystemTestSuiteSlang.runtimeMonitorStream
import bc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object TempControl_i_tcp_tempControl_SystemTestAPI {
  /** helper method to set the values of all incoming ports
    * @param api_tempChanged incoming event port
    * @param api_fanAck incoming event data port
    * @param api_setPoint incoming event data port
    * @param api_currentTemp incoming data port
    */
  def put_concrete_inputs(api_tempChanged: Option[art.Empty],
                          api_fanAck: Option[BuildingControl.FanAck.Type],
                          api_setPoint: Option[BuildingControl.SetPoint_i],
                          api_currentTemp: BuildingControl.Temperature_i): Unit = {
    put_tempChanged(api_tempChanged)
    put_fanAck(api_fanAck)
    put_setPoint(api_setPoint)
    put_currentTemp(api_currentTemp)
  }

  // setter for incoming event  port
  def put_tempChanged(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.tempChanged_Id, v)
      case _ =>
    }
  }

  // setter for incoming event data port
  def put_fanAck(value: Option[BuildingControl.FanAck.Type]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.fanAck_Id, BuildingControl.FanAck_Payload(v))
      case _ =>
    }
  }

  // setter for incoming event data port
  def put_setPoint(value: Option[BuildingControl.SetPoint_i]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.setPoint_Id, BuildingControl.SetPoint_i_Payload(v))
      case _ =>
    }
  }

  // setter for incoming data port
  def put_currentTemp(value: BuildingControl.Temperature_i): Unit = {
    Art.insertInInfrastructurePort(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.operational_api.currentTemp_Id, BuildingControl.Temperature_i_Payload(value))
  }

  def fetchContainer(): bc.BuildingControl.TempControl_i_tcp_tempControl_PostState_Container_PS = {
    if (runtimeMonitorStream.contains(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.id)) {
      val (_, postContainer_) = runtimeMonitorStream.get(Arch.BuildingControlDemo_i_Instance_tcp_tempControl.id).get
      return postContainer_.asInstanceOf[bc.BuildingControl.TempControl_i_tcp_tempControl_PostState_Container_PS]
    }
    else {
      assert(F, s"No post state recorded for ${Arch.BuildingControlDemo_i_Instance_tcp_tempControl.name}")
      halt(s"No post state recorded for ${Arch.BuildingControlDemo_i_Instance_tcp_tempControl.name}")
    }
  }

  def check_concrete_outputs(api_fanCmd: Option[BuildingControl.FanCmd.Type]): Unit = {
    var failureReasons: ISZ[ST] = ISZ()

    val actual_fanCmd = get_api_fanCmd()
    if (api_fanCmd != actual_fanCmd) {
      failureReasons = failureReasons :+ st"'fanCmd' did not match expected.  Expected: $api_fanCmd, Actual: $actual_fanCmd"
    }

    assert(failureReasons.isEmpty, st"${(failureReasons, "\n")}".render)
  }

  def get_api_fanCmd(): Option[BuildingControl.FanCmd.Type] = {
    return fetchContainer().api_fanCmd
  }
}