// #Sireum

package bc.BuildingControl

import org.sireum._
import art._
import bc.SystemTestSuiteSlang.runtimeMonitorStream
import bc._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object TempSensor_i_tcp_tempSensor_SystemTestAPI {
  /** helper method to set the values of all incoming ports
    */
  def put_concrete_inputs(): Unit = {
  }



  def fetchContainer(): bc.BuildingControl.TempSensor_i_tcp_tempSensor_PostState_Container_PS = {
    if (runtimeMonitorStream.contains(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.id)) {
      val (_, postContainer_) = runtimeMonitorStream.get(Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.id).get
      return postContainer_.asInstanceOf[bc.BuildingControl.TempSensor_i_tcp_tempSensor_PostState_Container_PS]
    }
    else {
      assert(F, s"No post state recorded for ${Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.name}")
      halt(s"No post state recorded for ${Arch.BuildingControlDemo_i_Instance_tcp_tempSensor.name}")
    }
  }

  def check_concrete_outputs(api_tempChanged: Option[art.Empty],
                             api_currentTemp: BuildingControl.Temperature_i): Unit = {
    var failureReasons: ISZ[ST] = ISZ()

    val actual_tempChanged = get_api_tempChanged()
    if (api_tempChanged != actual_tempChanged) {
      failureReasons = failureReasons :+ st"'tempChanged' did not match expected.  Expected: $api_tempChanged, Actual: $actual_tempChanged"
    }
    val actual_currentTemp = get_api_currentTemp()
    if (api_currentTemp != actual_currentTemp) {
      failureReasons = failureReasons :+ st"'currentTemp' did not match expected.  Expected: $api_currentTemp, Actual: $actual_currentTemp"
    }

    assert(failureReasons.isEmpty, st"${(failureReasons, "\n")}".render)
  }

  def get_api_tempChanged(): Option[art.Empty] = {
    return fetchContainer().api_tempChanged
  }

  def get_api_currentTemp(): BuildingControl.Temperature_i = {
    return fetchContainer().api_currentTemp
  }
}