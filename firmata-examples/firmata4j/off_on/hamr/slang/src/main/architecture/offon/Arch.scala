// #Sireum

package offon

import org.sireum._
import art._
import art.PortMode._
import art.DispatchPropertyProtocol._
import art.Art.BridgeId._
import art.Art.PortId._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object Arch {
  val OffOnDemo_i_Instance_p_on : offon.Off_On.On_p_on_Bridge = {
    val turnOff = Port[Base_Types.Integer] (id = portId"0", name = "OffOnDemo_i_Instance_p_on_turnOff", mode = EventOut)
    val turnOn = Port[Base_Types.Integer] (id = portId"1", name = "OffOnDemo_i_Instance_p_on_turnOn", mode = EventIn)

    offon.Off_On.On_p_on_Bridge(
      id = bridgeId"0",
      name = "OffOnDemo_i_Instance_p_on",
      dispatchProtocol = Periodic(period = 1000),
      dispatchTriggers = None(),

      turnOff = turnOff,
      turnOn = turnOn
    )
  }
  val OffOnDemo_i_Instance_p_off : offon.Off_On.Off_p_off_Bridge = {
    val turnOff = Port[Base_Types.Integer] (id = portId"2", name = "OffOnDemo_i_Instance_p_off_turnOff", mode = EventIn)
    val turnOn = Port[Base_Types.Integer] (id = portId"3", name = "OffOnDemo_i_Instance_p_off_turnOn", mode = EventOut)

    offon.Off_On.Off_p_off_Bridge(
      id = bridgeId"1",
      name = "OffOnDemo_i_Instance_p_off",
      dispatchProtocol = Periodic(period = 1000),
      dispatchTriggers = None(),

      turnOff = turnOff,
      turnOn = turnOn
    )
  }

  val ad : ArchitectureDescription = {

    ArchitectureDescription(
      components = IS[Art.BridgeId, Bridge] (OffOnDemo_i_Instance_p_on, OffOnDemo_i_Instance_p_off),

      connections = IS[Art.ConnectionId, UConnection] (Connection(from = OffOnDemo_i_Instance_p_on.turnOff, to = OffOnDemo_i_Instance_p_off.turnOff),
                                                       Connection(from = OffOnDemo_i_Instance_p_off.turnOn, to = OffOnDemo_i_Instance_p_on.turnOn))
    )
  }
}
