// #Sireum

package offon.Off_On

import org.sireum._
import art.{Art, ArtNative, Empty}
import offon._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait Off_p_off_TestApi {

  def BeforeEntrypoint(): Unit = {
    Art.initTest(Arch.OffOnDemo_i_Instance_p_off)
  }

  def AfterEntrypoint(): Unit = {
    Art.finalizeTest(Arch.OffOnDemo_i_Instance_p_off)
  }

  def testCompute(): Unit = {
    Art.manuallyClearOutput()
    Art.testCompute(Arch.OffOnDemo_i_Instance_p_off)
  }

  def testInitialise(): Unit = {
    Art.manuallyClearOutput()
    Art.testInitialise(Arch.OffOnDemo_i_Instance_p_off)
  }

  /** helper function to set the values of all input ports.
   * @param turnOff payloads for event data port turnOff.
   *   ART currently supports single element event data queues so
   *   only the last element of turnOff will be used
   */
  def put_concrete_inputs(turnOff : ISZ[Base_Types.Integer]): Unit = {
    for(v <- turnOff){
      put_turnOff(v)
    }
  }


  /** helper function to check Off_p_off's
   * output ports.  Use named arguments to check subsets of the output ports.
   * @param turnOn method that will be called with the payloads to be sent
   *        on the outgoing event data port 'turnOn'.
   */
  def check_concrete_output(turnOn: ISZ[Base_Types.Integer] => B): Unit = {
    var testFailures: ISZ[ST] = ISZ()

    var turnOnValue: ISZ[Base_Types.Integer] = ISZ()
    // TODO: event data port getter should return all of the events/payloads
    //       received on event data ports when queue sizes > 1 support is added
    //       to ART
    if(get_turnOn().nonEmpty) { turnOnValue = turnOnValue :+ get_turnOn().get }
    if(!turnOn(turnOnValue)) {
      testFailures = testFailures :+ st"'turnOn' did not match expected: received ${turnOnValue.size} events with the following payloads ${turnOnValue}"
    }

    assert(testFailures.isEmpty, st"${(testFailures, "\n")}".render)
  }


  // setter for in EventDataPort
  def put_turnOff(value : Base_Types.Integer): Unit = {
    ArtNative.insertInInfrastructurePort(Arch.OffOnDemo_i_Instance_p_off.operational_api.turnOff_Id, Base_Types.Integer_Payload(value))
  }

  // getter for out EventDataPort
  def get_turnOn(): Option[Base_Types.Integer] = {
    val value: Option[Base_Types.Integer] = get_turnOn_payload() match {
      case Some(Base_Types.Integer_Payload(v)) => Some(v)
      case Some(v) => halt(s"Unexpected payload on port turnOn.  Expecting 'Base_Types.Integer_Payload' but received ${v}")
      case _ => None[Base_Types.Integer]()
    }
    return value
  }

  // payload getter for out EventDataPort
  def get_turnOn_payload(): Option[Base_Types.Integer_Payload] = {
    return ArtNative.observeOutInfrastructurePort(Arch.OffOnDemo_i_Instance_p_off.initialization_api.turnOn_Id).asInstanceOf[Option[Base_Types.Integer_Payload]]
  }

}
